Preorder
class Node:
  def __init__(self, data):
    self.data = data
    self.left = None
    self.right=None
     
def insert(root,newVal):
    if root is None:
        root=Node(newVal)
        return root
    if newVal<root.data:
        root.left=insert(root.left,newVal)
    else:
        root.right=insert(root.right,newVal)
    return root
def preorder(root):
        if root==None:
            return
        print(root.data)
        preorder(root.left)
        preorder(root.right)                   
root= insert(None,15)
insert(root,10)
insert(root,25)
insert(root,6)
insert(root,14)
insert(root,20)
insert(root,60)
print("Printing values of binary tree in preorder Traversal.")
preorder(root)

#PostOrder
class Tree:
    def __init__(node,value):
        node.value = value
        node.right = None
        node.left = None
    def create_node(node,value):
        if (node.value is None):
            node.value = value
        else:
            if( value < node.value ):
                if (node.left is None): 
                    node.left = Tree(value)
                else:
                    node.left.create_node(value)
            elif( value > node.value ):
                if ( node.right is None):
                    node.right = Tree(value)
                else:
                    node.right.create_node(value)
    def Postorder( node, Root ):
        
        if( Root is None ):
            return
        node.Postorder(Root.left)
        node.Postorder(Root.right)
        print(Root.value,end = ' ')
    
Root = Tree(5)
Root.create_node(7)
Root.create_node(2)
Root.create_node(3)
Root.create_node(6)
Root.create_node(1)
Root.create_node(8)
print('Postorder traversal :',end = '')
Root.Postorder(Root)

#Inorder
class BinaryTreeNode:
  def __init__(self, data):
    self.data = data
    self.left = None
    self.right=None
     
def insert(root,newVal):
    if root is None:
        root=BinaryTreeNode(newVal)
        return root
    if newVal<root.data:
        root.left=insert(root.left,newVal)
    else:
        root.right=insert(root.right,newVal)
    return root
 
def inorder(root):
        if root==None:
            return
        inorder(root.left)
        print(root.data)
        inorder(root.right)     
               
root= insert(None,15)
insert(root,10)
insert(root,25)
insert(root,6)
insert(root,14)
insert(root,20)
insert(root,60)
print("Printing values of binary search tree in Inorder Traversal.")
inorder(root)
